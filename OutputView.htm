<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>CIR Admin - Retrieve & Export</title>
<link rel="stylesheet" href="cir-style.css" />
<script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
</head>
<body>
<h1>CIR Admin - Retrieve & Export</h1>
<form id="dataForm">
  <fieldset style="margin-bottom:1.5rem; padding:1rem;">
    <legend><strong>Admin Password</strong></legend>
    <label for="adminPassword">Admin Password:</label>
    <input type="password" id="adminPassword" autocomplete="current-password" />
  </fieldset>
  <fieldset style="margin-bottom:1.5rem; padding:1rem;">
    <legend><strong>Decryption Password</strong></legend>
    <label for="decryptPasswordSingle">Decryption Password (for single record):</label>
    <input type="password" id="decryptPasswordSingle" /><br>
    <label for="dataID" style="margin-top:0.8rem;">Data ID:</label>
    <input type="text" id="dataID" />
    <button type="button" id="btnFetchSingle" class="btn" style="margin-top:0.8rem;">Fetch Single Record & Decrypt</button>
  </fieldset>
  <fieldset style="margin-bottom:1.5rem; padding:1rem;">
    <legend><strong>Decryption Password</strong></legend>
    <label for="decryptPasswordAll">Decryption Password (for all records):</label>
    <input type="password" id="decryptPasswordAll" />
    <button type="button" id="btnFetchAll" class="btn" style="margin-top:0.8rem;">Fetch All Records & Decrypt</button>
  </fieldset>
  <fieldset style="margin-bottom:1.5rem; padding:1rem;">
    <legend><strong>Admin Password (Enter again to confirm)</strong></legend>
    <label for="adminPasswordReset">Admin Password:</label>
    <input type="password" id="adminPasswordReset" autocomplete="current-password" />
    <button type="button" id="btnReset" class="btn" style="background:#f44336; color:white; margin-top:0.8rem;">Reset Entire Database (Delete All Records)</button>
  </fieldset>
</form>

<h2>Decrypted Record(s):</h2>
<div id="recordsContainer" style="overflow-x:auto; margin-top: 1rem;"></div>

<!-- Excel Export Button will appear below decrypted records -->
<div id="excelExportArea" style="margin-top: 1rem; display:none;">
  <button id="btnExportExcel" class="btn">Export Decrypted Records to Excel</button>
</div>

<p><a href="index.htm">Back to Home</a></p>
<div id="message" style="margin-top:1rem; font-weight:bold; color:#c00;"></div>

<script>
const API_URL = 'https://api-gm7mkhepka-uc.a.run.app/api';

function showMessage(msg, color = 'red') {
  const el = document.getElementById('message');
  el.style.color = color;
  el.textContent = msg;
}

// Helper to create the records table with Delete button per row
function showDecryptedRecords(records, adminPassword) {
  const container = document.getElementById('recordsContainer');
  container.innerHTML = '';
  if (!records.length) {
    container.textContent = 'No decrypted records to show.';
    document.getElementById('excelExportArea').style.display = 'none';
    return;
  }
  const table = document.createElement('table');
  table.style.width = '100%';
  table.style.borderCollapse = 'collapse';
  table.style.border = '1px solid #ccc';

  const keys = Object.keys(records[0]);
  const thead = table.createTHead();
  const headerRow = thead.insertRow();

  keys.forEach(key => {
    const th = document.createElement('th');
    th.textContent = key === 'id' ? 'Record ID' : key;
    th.style.border = '1px solid #ddd';
    th.style.padding = '6px';
    th.style.backgroundColor = '#f2f2f2';
    headerRow.appendChild(th);
  });
  // Extra column header for delete button
  {
    const th = document.createElement('th');
    th.textContent = 'Actions';
    th.style.border = '1px solid #ddd';
    th.style.padding = '6px';
    th.style.backgroundColor = '#f2f2f2';
    headerRow.appendChild(th);
  }

  const tbody = table.createTBody();
  records.forEach(rec => {
    const row = tbody.insertRow();
    keys.forEach(key => {
      const cell = row.insertCell();
      let val = rec[key];
      if (Array.isArray(val)) val = val.join(', ');
      if (typeof val === 'object' && val !== null) val = JSON.stringify(val);
      cell.textContent = val || '';
      cell.style.border = '1px solid #ddd';
      cell.style.padding = '6px';
      cell.style.verticalAlign = 'top';
      cell.style.whiteSpace = 'pre-wrap';
    });
    // Add delete button cell
    const actionCell = row.insertCell();
    const delBtn = document.createElement('button');
    delBtn.textContent = 'Delete';
    delBtn.style.background = '#f44336';
    delBtn.style.color = 'white';
    delBtn.className = 'btn';
    delBtn.onclick = async () => {
      if (!confirm(`Delete record ID ${rec.id}? This cannot be undone.`)) return;
      try {
        const response = await fetch(`${API_URL}/record/${rec.id}`, {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ adminPassword })
        });
        if (!response.ok) {
          const err = await response.json();
          showMessage(err.message || 'Failed to delete record.');
          return;
        }
        // Remove deleted record from table
        showMessage(`Record ${rec.id} deleted.`, 'green');
        // Refresh list by re-fetching all using current decryption password
        document.getElementById('btnFetchAll').click();
      } catch (err) {
        showMessage('Error contacting backend: ' + err.message);
      }
    };
    actionCell.appendChild(delBtn);
    actionCell.style.border = '1px solid #ddd';
    actionCell.style.padding = '6px';
    actionCell.style.textAlign = 'center';
  });
  container.appendChild(table);
  // Show export button area
  document.getElementById('excelExportArea').style.display = 'block';

  // Attach export button event
  document.getElementById('btnExportExcel').onclick = () => exportToExcel(records);
}

function exportToExcel(dataArray) {
  if (!dataArray.length) {
    alert('No data to export.');
    return;
  }
  const ws = XLSX.utils.json_to_sheet(dataArray);
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, 'CIR Records');
  XLSX.writeFile(wb, `CIR_Records_${new Date().toISOString().slice(0,10)}.xlsx`);
}

// Fetch Single Record & Decrypt
document.getElementById('btnFetchSingle').onclick = async () => {
  showMessage('');
  const adminPass = document.getElementById('adminPassword').value.trim();
  const decryptPass = document.getElementById('decryptPasswordSingle').value.trim();
  const dataID = document.getElementById('dataID').value.trim();
  if (!adminPass) { showMessage('Admin Password is required.'); return; }
  if (!decryptPass) { showMessage('Decryption Password is required.'); return; }
  if (!dataID) { showMessage('Data ID is required.'); return; }
  try {
    const response = await fetch(`${API_URL}/record/${encodeURIComponent(dataID)}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ adminPassword: adminPass, decryptionPassword: decryptPass })
    });
    if (!response.ok) {
      const err = await response.json();
      showMessage(err.message || 'Failed to fetch record.');
      return;
    }
    const record = await response.json();
    if (!record) {
      showMessage('No data returned or decryption failed.');
      return;
    }
    showDecryptedRecords([record], adminPass);
    showMessage('Single record decrypted successfully.', 'green');
  } catch (err) {
    showMessage('Error contacting backend: ' + err.message);
  }
};

// Fetch All Records & Export All to Excel
document.getElementById('btnFetchAll').onclick = async () => {
  showMessage('');
  const adminPass = document.getElementById('adminPassword').value.trim();
  const decryptPass = document.getElementById('decryptPasswordAll').value.trim();
  if (!adminPass) { showMessage('Admin Password is required.'); return; }
  if (!decryptPass) { showMessage('Decryption Password is required.'); return; }
  try {
    const response = await fetch(`${API_URL}/records/decrypt`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ adminPassword: adminPass, decryptionPassword: decryptPass })
    });
    if (!response.ok) {
      const err = await response.json();
      showMessage(err.message || 'Failed to fetch records.');
      return;
    }
    const records = await response.json();
    if (!Array.isArray(records) || records.length === 0) {
      showMessage('No records decrypted successfully. Check passwords.');
      document.getElementById('recordsContainer').innerHTML = '';
      document.getElementById('excelExportArea').style.display = 'none';
      return;
    }
    showDecryptedRecords(records, adminPass);
    showMessage(`Decrypted ${records.length} record(s).`, 'green');
  } catch (err) {
    showMessage('Error contacting backend: ' + err.message);
  }
};

// Reset Entire Database
document.getElementById('btnReset').onclick = async () => {
  showMessage('');
  const mainAdminPass = document.getElementById('adminPassword').value.trim();
  const resetAdminPass = document.getElementById('adminPasswordReset').value.trim();

  if (!mainAdminPass || !resetAdminPass) {
    showMessage('Both admin password fields are required to confirm reset.');
    return;
  }

  if (mainAdminPass !== resetAdminPass) {
    showMessage('Admin passwords do not match. Please enter the same password.');
    return;
  }

  if (!confirm('WARNING: This will permanently delete all records! Are you sure?')) {
    return;
  }

  try {
    const response = await fetch(`${API_URL}/reset`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ adminPassword: resetAdminPass })  // or mainAdminPass - same value
    });
    if (!response.ok) {
      const err = await response.json();
      showMessage(err.message || 'Failed to reset database.');
      return;
    }
    showMessage('All records deleted successfully.', 'green');
    document.getElementById('recordsContainer').innerHTML = '';
    document.getElementById('excelExportArea').style.display = 'none';
    document.getElementById('adminPasswordReset').value = '';
    document.getElementById('adminPassword').value = '';
  } catch (err) {
    showMessage('Error contacting backend: ' + err.message);
  }
};
</script>
</body>
</html>
